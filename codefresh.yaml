version: '1.0'
steps:
  # Set ENV vars that must be evaluated (can not be set via Codegresh UI).
  CFExportK8S:
    title: Export K8S ENV vars
    image: 'codefresh/plugin-helm:2.8.0'
    commands:
      # Helper to get the name to set the context farther below. Codefresh sets
      # the kubeconfig based on your clusters, before running build steps. Here
      # we assume a single cluster is configured. If you want to specify the
      # cluster, "KUBE_CONTEXT" could be set manually as an ENV var in the
      # Codefresh UI.
      # @todo This would be a nice built-in feature of Codefresh, if there is
      #   only one K8S cluster configured.
      - cf_export KUBE_CONTEXT=$(kubectl config get-contexts -o name | head -n 1)

  CFExportCommon:
    title: Export common ENV vars
    image: alpine:latest
    commands:
      # Set Helm release name for reference farther below.
      - cf_export RELEASE_NAME=cf-${{CF_REPO_OWNER}}-${{CF_REPO_NAME}}-${{CF_PR_NUMBER}}
      # Set image name and tag.
      - cf_export IMAGE_REPOSITORY=${{REGISTRY_DOMAIN}}/${{REGISTRY_ACCOUNT}}/codefreshpr
      - cf_export IMAGE_TAG=${{CF_REVISION}}

  # See https://github.com/scottrigby/cf-export
  CFExportPR:
    title: Export CF_PR_ ENV vars
    image: r6by/cf-export

  # Always run.
  # @todo Expose PR event trigger actions as ENV vars or structured conditionals.
  HelmDelete:
    title: Helm Delete
    image: 'codefresh/plugin-helm:2.8.0'
    commands:
      # Request: PR number VAR (here ${{CF_PR_NUMBER}}).
      - helm delete --purge ${{RELEASE_NAME}}
      # If the PR is closed or merged, end the pipeline steps here.
      # Alternatively, use a CF conditional check in a separate step:
      # https://docs.codefresh.io/docs/conditional-execution-of-steps
      - >-
        echo "The PR is ${{CF_PR_STATE}}"
        case ${{CF_PR_STATE}} in
          CLOSED|MERGED)
            exit 1 ;;
        esac

  # Run only if PR is not closed or merged (see HelmDelete step commands above).
  BuildingDockerImage:
    title: Building Docker Image
    type: build
    image_name: codefreshpr
    working_directory: ./
    dockerfile: Dockerfile
    tag: '${{IMAGE_TAG}}'

  PushingToDockerRegistry:
    title: Pushing to Docker Registry
    type: push
    candidate: '${{BuildingDockerImage}}'
    tag: '${{IMAGE_TAG}}'
    registry: gcr

  # Docker image name pattern: ${{RELEASE_NAME}}:${{CF_SHORT_REVISION}}
  HelmInstall:
    title: Helm Install
    image: 'codefresh/plugin-helm:2.8.0'
    # @todo Is setting the working_directory required?
    working_directory: ./
    commands:
      - kubectl config use-context ${{KUBE_CONTEXT}}
      - helm init --client-only
      - >-
        helm install go-hello/
        --namespace=${{NAMESPACE}}
        --name ${{RELEASE_NAME}}
        --set image.repository=${{IMAGE_REPOSITORY}}
        --set image.tag=${{IMAGE_TAG}}

  CFExportHelm:
    title: Export Helm ENV vars
    image: 'codefresh/plugin-helm:2.8.0'
    commands:
      - >-
        export NODE_PORT=$(kubectl get --namespace ${{NAMESPACE}} -o jsonpath="{.spec.ports[0].nodePort}" services ${{RELEASE_NAME}})
        export NODE_IP=$(kubectl get nodes --namespace ${{NAMESPACE}} -o jsonpath="{.items[0].status.addresses[0].address}")
        cf_export HELM_URL=$(http://$NODE_IP:$NODE_PORT)

  GitHubSetDeployStatus:
    title: Set PR deployment status to "success"
    image: cloudposse/github-status-updater
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=PR Release
      - GITHUB_STATE=success
      - GITHUB_DESCRIPTION=Deployed to ${{NAMESPACE}} namespace
      # See CFExportHelm step above.
      - GITHUB_TARGET_URL=${{HELM_URL}}
