version: '1.0'
steps:
  # Set ENV vars that must be evaluated (can not be set via Codegresh UI).
  CFExportK8S:
    title: Export K8S ENV vars
    image: 'codefresh/plugin-helm:2.8.0'
    commands:
      # Helper to get the name to set the context farther below. Codefresh sets
      # the kubeconfig based on your clusters, before running build steps. Here
      # we assume a single cluster is configured. If you want to specify the
      # cluster, "KUBE_CONTEXT" could be set manually as an ENV var in the
      # Codefresh UI.
      # @todo This would be a nice built-in feature of Codefresh, if there is
      #   only one K8S cluster configured.
      - cf_export KUBE_CONTEXT=$(kubectl config get-contexts -o name | head -n 1)

  # See https://github.com/scottrigby/cf-export
  CFExportPR:
    title: Export CF_PR_ ENV vars
    image: r6by/cf-export

  CFExportCommon:
    title: Export common ENV vars
    image: alpine:latest
    commands:
      # Set Helm release name for reference farther below.
      - cf_export RELEASE_NAME=cf-${CF_REPO_OWNER}-${CF_REPO_NAME}-${CF_PR_NUMBER}
      # Set image name and tag.
      - cf_export IMAGE_REPOSITORY=${REGISTRY_DOMAIN}/${REGISTRY_ACCOUNT}/codefreshpr
      - cf_export IMAGE_TAG=${{CF_REVISION}}

  # Always run.
  # @todo Expose PR event trigger actions as ENV vars or structured conditionals.
  HelmDelete:
    title: Helm Delete
    image: 'codefresh/plugin-helm:2.8.0'
    commands:
      - |-
        kubectl config use-context ${{KUBE_CONTEXT}}
        if helm status ${RELEASE_NAME} > /dev/null 2>&1; then
          helm delete --purge ${RELEASE_NAME}
          echo 'Deleted PR env'
        else
          echo 'No PR env to delete'
        fi

  # Run only if PR is not closed or merged (see HelmDelete step commands above).
  BuildingDockerImage:
    title: Building Docker Image
    type: build
    image_name: codefreshpr
    working_directory: ./
    dockerfile: Dockerfile
    tag: '${{IMAGE_TAG}}'
    when:
      condition:
        all:
          prOpen: '"${{CF_PR_STATE}}" == "OPEN"'

  PushingToDockerRegistry:
    title: Pushing to Docker Registry
    type: push
    candidate: '${{BuildingDockerImage}}'
    tag: '${{IMAGE_TAG}}'
    registry: gcr
    when:
      condition:
        all:
          prOpen: '"${{CF_PR_STATE}}" == "OPEN"'

  HelmInstall:
    title: Helm Install
    image: 'codefresh/plugin-helm:2.8.0'
    # @todo Is setting the working_directory required?
    working_directory: ./
    commands:
      - |-
        kubectl config use-context ${KUBE_CONTEXT}
        helm install go-hello/ --namespace=${NAMESPACE} --name ${RELEASE_NAME} --set image.repository=${IMAGE_REPOSITORY} --set image.tag=${IMAGE_TAG}
        SERVICE_NAME=${RELEASE_NAME}-go-hello
        # @todo Make wait time an ENV-based configuration.
        WAIT=$((SECONDS+30))
        SERVICE_IP=""
        while [ -z "$SERVICE_IP" ] && [ "$SECONDS" -lt "$WAIT" ]
        do
          sleep 10
          echo -e "Service IP is still pending. Waiting..."
          SERVICE_IP=$(kubectl get svc --namespace ${NAMESPACE} ${SERVICE_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        done
        echo "SERVICE_IP=${SERVICE_IP}" >> ${CF_VOLUME_PATH}/env_vars_to_export
        echo "Exported SERVICE_IP ${SERVICE_IP}"
        HELM_URL=http://${SERVICE_IP}:${PORT}
        echo "HELM_URL=${HELM_URL}" >> ${CF_VOLUME_PATH}/env_vars_to_export
        echo "Exported HELM_URL ${HELM_URL}"
    when:
      condition:
        all:
          prOpen: '"${{CF_PR_STATE}}" == "OPEN"'

  GitHubSetDeployStatus:
    title: Set PR deployment status to "success"
    image: cloudposse/github-status-updater
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=PR Release
      - GITHUB_STATE=success
      - GITHUB_DESCRIPTION=Deployed to ${{NAMESPACE}} namespace
      # See InstallChart step.
      - GITHUB_TARGET_URL=${{HELM_URL}}
    when:
      condition:
        all:
          prOpen: '"${{CF_PR_STATE}}" == "OPEN"'
          # @todo Consider letting this fail if the SERVICE_IP wasn't set due to
          #   scripting error in InstallChart step?
          helmURL: '"${{SERVICE_IP}}" != ""'
